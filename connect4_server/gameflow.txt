Process for connect four game management
 - Server online
 - Client 1 Connects
    -> *ROOM: Client joins room or is assigned room name
    <- † MY_USERNAME: Client sends name
    -> *PLAYER ASSIGN SIDE: Client is assigned black
 - Client 2 Connects
    -> *ROOM: Client joins room or is assigned room name
    <- † MY_USERNAME: Client sends name
    -> *PLAYER ASSIGN SIDE: Client is assigned red
 -> Send *GAME STATUS: START message
 -> Send *CHANGE TURN message black
 == Game loop starts ==
    == Move loop starts ==
        <- † MOVE: Player sends move
        - Server checks if move is valid
        - Server registers move
        - Server checks if game is over (f)
            - Is board full?
            - Is there a winner?
            - Return: 0 = no winner, 1 = X wins, 2 = O wins, 3 = draw
        - Server sends *BOARD UPDATE
        - If game is over, Server sends *GAME STATUS UPDATE message
            == End game loop ==
            - Wait for exit or restart game message from client
        - Else, Server sends *CHANGE TURN message
    == Move loop ends ==

SERVER MESSAGES:
 - *ROOM: Client joins room or is assigned room name
 - *PLAYER_ASSIGN_SIDE: Client is assigned black or red
 - *GAME_STATUS: START
 - *CHANGE_TURN: black or red
 - *BOARD_UPDATE: Board state
 - *GAME_STATUS_UPDATE: B_TURN, R_TURN, B_WON, R_WON, DRAW, NOT_STARTED
 - *ROOM_CHAT_MESSAGE: (room, sender, message)
 - *PRIVATE_CHAT_MESSAGE: (sender, receiver, message)


# ack_player_username
# ack_player_move
# ack_player_exit_game
# ack_player_restart
# ack_player_exit_room
# ack_player_room_chat

CLIENT MESSAGES:
 - † MY_USERNAME: Client sends name
 - † MOVE: Player sends move
 - † EXIT: Client exits game
 - † RESTART: Client restarts game
 - † EXIT_ROOM: Client exits room
 - † ROOM_CHAT_MESSAGE: Client joins room